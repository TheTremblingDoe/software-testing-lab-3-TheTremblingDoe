plugins {
    id 'java'
    id("jacoco")  // Add JaCoCo plugin
    id 'io.qameta.allure' version '2.11.2'
    id 'com.diffplug.spotless' version '6.22.0'

}

group = 'org.usvm'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.javalin:javalin:6.4.0")
    implementation("org.slf4j:slf4j-simple:2.0.16")
    implementation("com.google.code.gson:gson:2.12.1")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.2")

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation("io.rest-assured:rest-assured:5.5.1")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation("org.mockito:mockito-core:5.15.2")

}

tasks.allure {
    version = '2.24.0'
    autoconfigure = true
    useJUnit5 {
        version = '2.24.0'
    }
}

tasks.spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport, allureReport)  // Generate report after tests
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.12"  // Latest version as of 2024-05-20
    reportsDirectory.set(layout.buildDirectory.dir("reports/jacoco"))
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)  // Ensure tests run before generating report
    reports {
        xml.required.set(true)    // For CI/CD integration
        html.required.set(true)   // Human-readable HTML report
        csv.required.set(false)
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    
    // Optional: Exclude classes/packages from coverage
    classDirectories.setFrom(
        files(classDirectories.files.map {
            fileTree(it).exclude(
                "**/*Application.class",  // Example exclusion
                "**/generated/**"         // Example exclusion
            )
        })
    )
}

// Optional: Add coverage verification
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "0.90".toBigDecimal()  // 70% minimum coverage
            }
        }
    }
}

tasks.allureReport {
    resultsDir = file('build/allure-results')
}